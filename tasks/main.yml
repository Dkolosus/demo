# Role Create Linked or Full Clone of VM's Proxmox
 
# Get auth ticket (http api)
- name: generaticket
  uri:
    url: "https://{{ api_host }}/api2/json/access/ticket"
    method: Post
    validate_certs: no
    body_format: json
    body:
      username: "{{ api_user }}"
      password: "{{ api_password }}"
    return_content: yes
    headers:
      Content-Type: "application/json"
  register: ticket

# Set auth ticket and tocken vars    
- name: set fact json_ticket  
  set_fact: 
    json_ticket: "{{ ticket.json.data.ticket }}"
    json_tocken: "{{ ticket.json.data.CSRFPreventionToken }}"   
    cacheable: yes

# Get the list of storages (http api)
- name: Request Storage
  uri:
    url: "https://{{ api_host }}/api2/json/cluster/resources/?type=storage"
    validate_certs: no  
    use_proxy: no  
    method: Get
    return_content: yes
    url_username: "{{ api_user }}"  
    url_password: "{{ api_password }}"
    headers:
      Cookie: "PVEAuthCookie={{ json_ticket  }}"
      CSRFPreventionToken: "{{ json_tocken  }}"
  register: proxmox_req
   
# Get Avalible Memory on the node (http api)
- name: Request Avalible Memory
  uri:
    url: "https://{{ api_host }}/api2/json//cluster/resources/?type=node"
    validate_certs: no
    use_proxy: no
    method: Get
    return_content: yes
    url_username: "{{ api_user }}"
    url_password: "{{ api_password }}"
    headers:
      Cookie: "PVEAuthCookie={{ json_ticket  }}"
      CSRFPreventionToken: "{{ json_tocken  }}"
  register: proxmox_resources
    
# Request count nodes (http api)
- name: Request Count Nodes
  uri:
    url: "https://{{ api_host }}/api2/json/cluster/status/"
    validate_certs: no
    use_proxy: no
    method: Get
    return_content: yes
    url_username: "{{ api_user }}"
    url_password: "{{ api_password }}"
    headers:
      Cookie: "PVEAuthCookie={{ json_ticket  }}"
      CSRFPreventionToken: "{{ json_tocken  }}"
  register: proxmox_nodes

# Set count node var         
- name: Set Nodes Count
  set_fact:
    count_nodes: "{{ proxmox_nodes.json.data[0].nodes  }}"


# Create array to storages
- name: Touch Array
  set_fact:
    storage_list: []

# Find in list of storages allowed content images
- name: Find Storage with content "images"
  set_fact:        
    storage_list: "{{ storage_list | default([]) + [item.storage] }}" 
  loop: "{{ proxmox_req.json.data|flatten(levels=1) }}"
  when: item.content is search('images')

# Delete dublicate of storages names (the same storage on each node)
- name: Delete Dublicate Storage Names
  set_fact:
    storage_list: "{{ storage_list | unique | list  }}"      

# Fail if there is not storage with allowed content images    
- name: Check Storage
  fail:
    msg: 'There No conten=images storage avalible'
  when: ((storage_list | length ) < 1)

# Fail if there is more then one storage with allowed content images
- name: Check count storages with allowed content images 
  fail:
    msg: 'There {{ storage_list | length  }} storage with allowed content images Please select the only one'
    echo: yes
  register: storage
  when: ((storage_list | length ) > 1)

# Set storage var
- name: Set Storage == 1
  set_fact:
    storage: "{{ storage_list[0] }}"
  when: ((storage_list | length ) == 1)

# Calculate space
- name: Check Storage spaces
  set_fact:
    disk_aval: "{{ item.maxdisk }}"
  loop: "{{ proxmox_req.json.data|flatten(levels=1) }}"
  when: item.storage == storage

# Set Avalible Cpu's var
- name: Create var cpu_aval
  set_fact:
    cpu_aval: 0

# Get the Avalible CPU's (summ on each node)
- name: Get Cluster avalible CPU's
  set_fact:
    cpu_aval: "{{ cpu_aval | int +  item.maxcpu | int  }}"
  loop: "{{ proxmox_resources.json.data|flatten(levels=1) }}"

# Set  Avalible  Memory var
- name: Set Memory var
  set_fact:
    mem_aval: 0

# Calculate Avalible Memory (summ on each node)
- name: Get Cluster avalible Memory
  set_fact:
    mem_aval: "{{ mem_aval | int + item.maxmem | int  /1024/1024/1024 }}"
  loop: "{{ proxmox_resources.json.data|flatten(levels=1) }}"

# Convert avalible space byte to GB    
- name: Convert Byte to Gb
  set_fact:
    disk_aval: "{{ disk_aval | int /1024/1024/1024 }}"

# Set Summ Dictionary space var 
- name: Create Var dict_space
  set_fact:
    dict_space: 0

# Calculate space need
- name: Summ dict hdd
  set_fact:
    dict_space: "{{ dict_space | int  + item.value.disk | int  }}"
  loop: "{{ lookup('dict', vms)  }}"

# Set Summ Dictionary cpu's var
- name: Create Var dict_cpu
  set_fact:
    dict_cpu: 0

# Calculate cpus need    
- name: Summ dict cpu
  set_fact:
    dict_cpu: "{{ dict_cpu | int + item.value.cores | int  }}"
  loop: "{{ lookup('dict', vms)  }}"

# Set Summ Memory need var
- name: Create Var dict_mem      
  set_fact:
    dict_mem: 0

# Calculate memory need
- name: Summ dict mem
  set_fact:
    dict_mem: "{{ dict_mem | int + item.value.memory | int  }}"
  loop: "{{ lookup('dict', vms)  }}"

# Fail if not enough space on storage
- name: Check space requirements
  fail:
    msg: 'Not enough space on storage {{ storage }} need: {{ dict_space }} GB aval: {{ disk_aval }} GB'
  when: (dict_space | int > disk_aval | int )

# Fail if not enough memory on cluster
- name: Check memory requirements
  fail:
    msg: 'Not enough memory on cluster need: {{ dict_mem | int /1024 }} GB aval: {{ mem_aval }} GB'
  when: (dict_mem | int /1024  >  mem_aval | int)
    
# Fail if not enough cpu's on cluster
- name: Check CPU requirements
  fail:
    msg: 'More cpu cores are required: {{ dict_cpu  }} than are available in the cluster: {{ cpu_aval }}'
  when: (dict_cpu | int  >  cpu_aval | int)

# Clone the vm_template to linked clone  VM (when linked = true  ssh access pvesh tool api)
- name: Clone VM's Linked
  command: "pvesh create /nodes/{{ node_temp  }}/qemu/{{ vm_template_id }}/clone -newid {{ item.value.vmid  }} -name {{ item.value.name }} -target {{ item.value.node }}"
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}"
  when: linked == true

# Clone the vm_template to VM Full clone (when linked = false access http api)
- name: Clone VMs Full
  proxmox_kvm:
    node: "{{ node_temp }}"
    name: "{{ item.value.name }}"
    newid: "{{ item.value.vmid }}"
    target: "{{ item.value.node }}"
    bootdisk: "{{ boot_disk }}"
    storage: "{{ storage }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    api_host: "{{ api_host }}"
    clone: "{{ clone_vm }}"
    timeout: 240
    full: yes
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}"
  when: linked == false

# Resize VM's HDD (http api)
- name: Resize VM's HDD
  uri:
    url: "https://{{ api_host }}/api2/json//nodes/{{ item.value.node }}/qemu/{{ item.value.vmid }}/resize"
    validate_certs: no
    use_proxy: no
    method: PUT
    body_format: json
    body:
      disk: "{{ boot_disk }}"
      size: "{{ item.value.disk  }}G"
    headers:
      Cookie: "PVEAuthCookie={{ json_ticket }}"
      CSRFPreventionToken: "{{ json_tocken }}"
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}"

# Update the VM's Hardware (http api)
- name: Update VMs hardware
  proxmox_kvm:
    api_host: "{{ api_host }}"
    api_user: "{{ api_user }}"
    api_password: "{{ api_password }}"
    bootdisk: "{{ boot_disk  }}"
    cpu: "{{ cpu_type  }}"
    cpuunits: 1024
    cores: "{{ item.value.cores }}"
    sockets: "{{ item.value.sockets }}"
    memory: "{{ item.value.memory }}"
    vmid: "{{ item.value.vmid }}"
    node: "{{ item.value.node }}"
    name: "{{ item.value.name }}"
    update: yes
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}"

# Set ip address on eth0 (http api)
- name: Set ip addresses1
  command: qm set {{ item.value.vmid }} --ipconfig0 ip={{ item.value.net0_ipaddress }}
  delegate_to: "{{ item.value.node }}"
  loop: "{{ lookup('dict', vms) }}"

# Set ip address on eth1 (http api)
- name: Set ip addresses2
  command: qm set {{ item.value.vmid }} --ipconfig1 ip={{ item.value.net1_ipaddress }}
  delegate_to: "{{ item.value.node }}"
  loop: "{{ lookup('dict', vms) }}"
  when: (item.value.net1_ipaddress is defined)

# Start the VM's (http api)
- name: Start VM's
  proxmox_kvm:
    api_host:     "{{ api_host }}"
    api_password: "{{ api_password }}"
    api_user:     "{{ api_user }}"
    vmid:         "{{ item.value.vmid }}"
    node:         "{{ item.value.node }}"
    timeout: 240
    state:        started
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}"

# Restart VM's to resize storage (http api)
- name: Reboot VM's
  proxmox_kvm:
    api_host:     "{{ api_host }}"
    api_password: "{{ api_password }}"
    api_user:     "{{ api_user }}"
    vmid:         "{{ item.value.vmid }}"
    node:         "{{ item.value.node }}"
    timeout: 240
    state:        restarted
  delegate_to: "{{ node_temp }}"
  loop: "{{ lookup('dict', vms) }}" 
